import re
from typing import List, Dict, Tuple


def normalize(text: str, *, casefold: bool = True, yo2e: bool = True) -> str:
    if not text:
        return ""

    normalized = text

    if casefold:
        normalized = normalized.casefold()

    if yo2e:
        if casefold:
            normalized = normalized.replace('—ë', '–µ')
        else:
            normalized = normalized.replace('—ë', '–µ').replace('–Å', '–ï')

    normalized = re.sub(r'\s+', ' ', normalized)

    return normalized.strip()


def tokenize(text: str) -> List[str]:
    if not text:
        return []

    tokens = re.findall(r'\b\w+(?:-\w+)*\b', text, re.UNICODE)

    return tokens


def count_freq(tokens: List[str]) -> Dict[str, int]:

    freq_dict = {}

    for token in tokens:
        freq_dict[token] = freq_dict.get(token, 0) + 1

    return freq_dict


def top_n(freq: Dict[str, int], n: int = 5) -> List[Tuple[str, int]]:
    if not freq:
        return []

    sorted_items = sorted(
        freq.items(),

        key=lambda x: (-x[1], x[0]))

    return sorted_items[:n]
print(repr(normalize("–ü—Ä–ò–≤–ï—Ç\n–ú–ò—Ä\t")))
print(repr(normalize("—ë–∂–∏–∫, –Å–ª–∫–∞", yo2e=True)))
print(repr(normalize("Hello\r\nWorld")))
print(repr(normalize("  –¥–≤–æ–π–Ω—ã–µ   –ø—Ä–æ–±–µ–ª—ã  ")))

print(tokenize("–ø—Ä–∏–≤–µ—Ç –º–∏—Ä"))
print(tokenize("hello,world!!!"))
print(tokenize("–ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∫—Ä—É—Ç–æ"))
print(tokenize("2025 –≥–æ–¥"))
print(tokenize("emoji üòÄ –Ω–µ —Å–ª–æ–≤–æ"))

tokens1 = ["a","b","a","c","b","a"]
freq1 = count_freq(tokens1)
print(freq1)
print(top_n(freq1, 2))

tokens2 = ["bb","aa","bb","aa","cc"]
freq2 = count_freq(tokens2)
print(freq2)
print(top_n(freq2, 2))



import re
from collections import Counter


def normalize(text: str, *, casefold: bool = True, yo2e: bool = True) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    """
    # –ó–∞–º–µ–Ω–∞ —ë –Ω–∞ –µ
    if yo2e:
        text = text.replace('—ë', '–µ').replace('–Å', '–ï')

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É (casefold)
    if casefold:
        text = text.casefold()

    # –ó–∞–º–µ–Ω–∞ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'[\t\r\n]', ' ', text)

    # –°—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ –∫—Ä–∞—è–º
    text = re.sub(r'\s+', ' ', text).strip()

    return text


def tokenize(text: str) -> list[str]:
    """
    –†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã (—Å–ª–æ–≤–∞)
    """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ + –¥–µ—Ñ–∏—Å –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞
    pattern = r'\b[\w-]+\b'
    tokens = re.findall(pattern, text)

    return tokens


def count_freq(tokens: list[str]) -> dict[str, int]:
    """
    –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
    """
    return dict(Counter(tokens))


def top_n(freq: dict[str, int], n: int = 5) -> list[tuple[str, int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N —Å–ª–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    """
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã, –∑–∞—Ç–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0]))
    return sorted_items[:n]