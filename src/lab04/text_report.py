#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —á–∞—Å—Ç–æ—Ç —Å–ª–æ–≤.

–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç CSV –æ—Ç—á–µ—Ç.
"""

import sys
import argparse
from pathlib import Path
from collections import Counter

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
try:
    from src.lab04.io_txt_csv import read_text, write_csv
    from src.lab03.text1 import normalize, tokenize
except ImportError:
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ–±–ª–µ–º —Å –ø—É—Ç—è–º–∏
    import sys
    from pathlib import Path

    sys.path.insert(0, str(Path(__file__).parent.parent))
    from src.lab04.io_txt_csv import read_text, write_csv
    from src.lab03.text1 import normalize, tokenize


def calculate_word_frequencies(text: str) -> dict[str, int]:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ.

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å {—Å–ª–æ–≤–æ: —á–∞—Å—Ç–æ—Ç–∞}
    """
    if not text.strip():
        return {}

    normalized_text = normalize(text)
    tokens = tokenize(normalized_text)
    return Counter(tokens)


def get_top_words(freq: dict[str, int], n: int = None) -> list[tuple[str, int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã.

    Args:
        freq: –°–ª–æ–≤–∞—Ä—å —á–∞—Å—Ç–æ—Ç
        n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (None = –≤—Å–µ —Å–ª–æ–≤–∞)

    Returns:
        –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Å–ª–æ–≤–æ, —á–∞—Å—Ç–æ—Ç–∞), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å—Ç–æ—Ç–µ ‚Üì, —Å–ª–æ–≤—É ‚Üë
    """
    sorted_words = sorted(freq.items(), key=lambda x: (-x[1], x[0]))
    return sorted_words[:n] if n is not None else sorted_words


def generate_report(input_file: Path, output_file: Path, encoding: str = "cp1251") -> bool:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞.

    Args:
        input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        output_file: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        encoding: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞

    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ß—Ç–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        print(f"üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {input_file} (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding})")
        text = read_text(input_file, encoding=encoding)

        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞...")
        frequencies = calculate_word_frequencies(text)
        total_words = sum(frequencies.values())
        unique_words = len(frequencies)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CSV
        if frequencies:
            sorted_words = get_top_words(frequencies)
            write_csv(sorted_words, output_file, header=("word", "count"))
            print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        else:
            # –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª - —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            write_csv([], output_file, header=("word", "count"))
            print("üíæ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç (—Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)")

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n" + "=" * 40)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê –¢–ï–ö–°–¢–ê")
        print("=" * 40)
        print(f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {total_words}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {unique_words}")

        if frequencies:
            top_5 = get_top_words(frequencies, 5)
            print("\nüèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤:")
            for i, (word, count) in enumerate(top_5, 1):
                print(f"  {i}. '{word}' - {count}")
        else:
            print("\nüì≠ –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        print("=" * 40)

        return True

    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{input_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except UnicodeDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É: --encoding cp1251")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    parser = argparse.ArgumentParser(
        description="–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —á–∞—Å—Ç–æ—Ç —Å–ª–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s                                  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  %(prog.py --in data/in.txt --out out.csv  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—É—Ç–∏
  %(prog)s --encoding cp1251               # –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏–∑ Windows
  %(prog)s -i text.txt -o report.csv -e windows-1251

–ö—Ä–∞–µ–≤—ã–µ —Å–ª—É—á–∞–∏:
  ‚Ä¢ –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—à–∏–±–∫–∞ —Å –∫–æ–¥–æ–º –≤—ã—Ö–æ–¥–∞ 1
  ‚Ä¢ –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π - —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π - –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --encoding
        """
    )

    parser.add_argument(
        '-i', '--in',
        dest='input_file',
        default='data/input.txt',
        help='–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/input.txt)'
    )

    parser.add_argument(
        '-o', '--out',
        dest='output_file',
        default='data/report.csv',
        help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/report.csv)'
    )

    parser.add_argument(
        '-e', '--encoding',
        dest='encoding',
        default='utf-8',
        help='–ö–æ–¥–∏—Ä–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: utf-8). –î–ª—è Windows —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ cp1251'
    )

    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    args = parser.parse_args()

    if args.verbose:
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞...")
        print(f"   –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.input_file}")
        print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.output_file}")
        print(f"   –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {args.encoding}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π
    input_path = Path(args.input_file)
    output_path = Path(args.output_file)

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_path.parent.mkdir(parents=True, exist_ok=True)

    # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    success = generate_report(input_path, output_path, args.encoding)

    if success:
        if args.verbose:
            print(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        if args.verbose:
            print(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()